/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.List;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.mail.MessagingException;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jonas
 */
public class GuiVerkoopVerw extends javax.swing.JFrame {

    /**
     * Creates new form GuiAankoop
     */
    private static final GuiVerkoopVerw guiAk = new GuiVerkoopVerw();
    DefaultTableModel model;
    private Spaarkaart sk;
    private Filiaal fn;
    private Email mail = Email.getInstance();
    private double puntenTotGekr = 0;
    private double puntenTotKopen = 0;
    private double puntenTotBonus = 0;
    private double prijsTot = 0;
    private boolean vip = false;
    private boolean bs = false;
    private boolean wasBS = false;
    private boolean wolverene = false;
    private boolean wasWolverene = false;
    private String major = "";
    private String wasMajor = "";
    MySQL sql = new MySQL(); 
    ArrayList<Artikel> sortList = new ArrayList<Artikel>();
    Map<Artikel, Integer> hm = new HashMap<Artikel, Integer>();
    
  
    
    public GuiVerkoopVerw() {
        initComponents();
    }
    
    public static GuiVerkoopVerw getInstance()
    {
        return guiAk;
    }
    
    public void setSpaarkaart(Spaarkaart sk)
    {
        this.sk = sk;
        lblVoornaam.setText(sk.getSNaam() + " " + sk.getVoornaam());
        lblNaam.setText((sk.getNaam()));
        lblStraat.setText(sk.getStraat() + " " + sk.getNummer());
        lblPostcode.setText(sk.getPostcode() + " " + sk.getStad());
        lblEmail.setText(sk.getEmail());
        if(!sk.getBedrijf())
        {
            lblDag.setText(Integer.toString(sk.getGebD()) + "/" + Integer.toString(sk.getGebM()) + "/" +  Integer.toString(sk.getGebJ()));
        }
        else
        {
            lblDag.setText(sk.getBtw());
        }
        lblPunten.setText("Puntentotaal: " + sk.getGesP());
        lblSaldo.setText("Puntensaldo: " + sk.getWerkP());
        if(fn.getMajor() == sk.getID())
        {
            BufferedImage logo;
            try {
                logo = ImageIO.read(new File("major.png"));
                lblBadge1.setIcon(new ImageIcon(logo));
            } catch (IOException ex) 
            {
                System.out.println("?");
            }
        }
        if(sk.getBigspender())
        {
            BufferedImage logo;
            try {
                logo = ImageIO.read(new File("bigspender.png"));
                lblBadge2.setIcon(new ImageIcon(logo));
            } catch (IOException ex) 
            {
                System.out.println("?");
            }
        }
        if(sk.getWolverene())
        {
            BufferedImage logo;
            try {
                logo = ImageIO.read(new File("wolverene.png"));
                lblBadge3.setIcon(new ImageIcon(logo));
            } catch (IOException ex) 
            {
                System.out.println("?");
            }
        }         
        InputStream bs = sk.getFoto();
        try {
            BufferedImage img = ImageIO.read(bs);
            Image bi = img.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            lblImage.setIcon(new ImageIcon(bi));
        } catch (IOException ex) 
        {
        }    
    }
    
    public void setFiliaal(Filiaal fi)
    {
        this.fn = fi;
    }
    
    public void setAankopen(Artikel a, int hoev)
    {
        hm.put(a, hoev);
    }

    public void init()
    {
        laagstePunten(hm);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblVoornaam = new javax.swing.JLabel();
        lblNaam = new javax.swing.JLabel();
        lblStraat = new javax.swing.JLabel();
        lblPostcode = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblDag = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        lblPunten = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        lblBadge1 = new javax.swing.JLabel();
        lblBadge2 = new javax.swing.JLabel();
        lblBadge3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAankopen = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));

        lblVoornaam.setText("Voornaam");

        lblNaam.setText("Naam");

        lblStraat.setText("Straat");

        lblPostcode.setText("Postcode");

        lblEmail.setText("Email");

        lblDag.setText("Datum");

        lblPunten.setText("Puntentotaal");

        lblSaldo.setText("Puntensaldo");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblPunten)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblSaldo)
                        .add(132, 132, 132)
                        .add(lblBadge1)
                        .add(41, 41, 41)
                        .add(lblBadge2)
                        .add(55, 55, 55)
                        .add(lblBadge3)
                        .add(130, 130, 130))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(lblPostcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblStraat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblNaam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblVoornaam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(98, 98, 98)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblDag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 125, Short.MAX_VALUE)
                        .add(lblImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(190, 190, 190))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblImage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblVoornaam)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblNaam)
                            .add(lblEmail))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblStraat)
                            .add(lblDag))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblPostcode)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(lblPunten)
                        .add(3, 3, 3))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblBadge1)
                            .add(lblSaldo)
                            .add(lblBadge2)
                            .add(lblBadge3))))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Spaarkaart"));

        jLabel2.setText("Aantal punten");

        jLabel3.setText("Mayor");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel3))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(18, 18, 18)
                .add(jLabel3)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Aankoop"));

        model = new DefaultTableModel()
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        tblAankopen.setModel(model);
        model.setColumnIdentifiers(new Object[]{"Naam", "Hoeveelheid", "Punten", "Pbetaald", "Bonuspunten", "Prijs" });
        jScrollPane1.setViewportView(tblAankopen);

        jLabel19.setText("Totaalbedrag");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel19)
                .add(259, 259, 259))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 331, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void laagstePunten (Map<Artikel, Integer> map)
    {
        puntenTotGekr = 0;
        puntenTotKopen = 0;
        puntenTotBonus = 0;
        prijsTot = 0;
        vip = false;
        bs = false;
        wasBS = false;
        wolverene = false;
        wasWolverene = false;
        major = "";
        wasMajor = "";
        System.out.println("TEST");
        for(Artikel a: map.keySet())
        {
            sortList.add(a);
        }
        Collections.sort(sortList, new Comparator<Artikel>() 
        {
            public int compare(Artikel a1, Artikel a2) 
            {
                return new Double(a1.getPrijs()).compareTo(new Double(a2.getPrijs()));
            }
        });
        double toSpend = sk.getWerkP();
        for(Artikel b: sortList)
        {
            double puntenGekr = 0;
            double puntenKop = 0;
            double prijs = 0;
            double bonusPtn = 0;
            int hoev = hm.get(b);
            double ptnNodig = b.getPuntenKopen() * hoev;
            if(toSpend >= ptnNodig)
            {
                toSpend = toSpend - ptnNodig;
                puntenKop = ptnNodig;
                model.addRow(new Object[] {b.getNaam(), hoev, "--", ptnNodig, "--", "--" });
                puntenGekr = (double) Math.round(puntenGekr*100)/100;
                puntenKop = (double) Math.round(puntenKop*100)/100;
                bonusPtn = (double) Math.round(bonusPtn*100)/100;
                prijs = (double) Math.round(prijs*100)/100;
                try 
                {
                    sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), hoev, puntenGekr + bonusPtn, puntenKop, prijs);

                } catch (SQLException ex) 
                {
                }                
            }
            else
            {
                if(toSpend >= b.getPuntenKopen())
                {
                    int i = 0;
                    for(i = 0; (i+1)*b.getPuntenKopen() < toSpend; i++)
                    {
                    }
                    if((hoev-i) >= b.getMinimum())
                    {
                        System.out.println("i>bget"+ (hoev-i) + " " + b.getMinimum());
                        bonusPtn = Math.round((hoev-i)*0.10);
                        puntenKop = i*b.getPuntenKopen();
                        puntenGekr = b.getPuntenGekregen()*(hoev-i);
                        prijs = b.getPrijs()*(hoev-i);
                        model.addRow(new Object[] {b.getNaam(), i, "--", i*b.getPuntenKopen(), "--", "--" });
                        model.addRow(new Object[] {b.getNaam(), hoev-i, b.getPuntenGekregen()*(hoev-i), "--", bonusPtn, b.getPrijs()*(hoev-i)});
                        toSpend = toSpend - (i*b.getPuntenKopen());
                        puntenGekr = (double) Math.round(puntenGekr*100)/100;
                        puntenKop = (double) Math.round(puntenKop*100)/100;
                        bonusPtn = (double) Math.round(bonusPtn*100)/100;
                        prijs = (double) Math.round(prijs*100)/100;
                        try 
                        {
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), i, 0, i*b.getPuntenKopen(), 0);
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), hoev-i, b.getPuntenGekregen()*(hoev-i)+bonusPtn, 0, b.getPrijs()*(hoev-i));
                        } catch (SQLException ex) 
                        {
                        }    
                    }
                    else
                    {
                        System.out.println("i<bget" + i + " " + b.getMinimum());
                        puntenKop = i*b.getPuntenKopen();
                        puntenGekr = b.getPuntenGekregen()*(hoev-i);
                        prijs = b.getPrijs()*(hoev-i);
                        model.addRow(new Object[] {b.getNaam(), i, "--", i*b.getPuntenKopen(), "--", "--" });
                        model.addRow(new Object[] {b.getNaam(), hoev-i, b.getPuntenGekregen()*(hoev-i), "--", "--", b.getPrijs()*(hoev-i)});                        
                        toSpend = toSpend - (i*b.getPuntenKopen());
                        puntenGekr = (double) Math.round(puntenGekr*100)/100;
                        puntenKop = (double) Math.round(puntenKop*100)/100;
                        bonusPtn = (double) Math.round(bonusPtn*100)/100;
                        prijs = (double) Math.round(prijs*100)/100;
                        try 
                        {
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), i, 0, i*b.getPuntenKopen(), 0);
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), hoev-i, b.getPuntenGekregen()*(hoev-i), 0, b.getPrijs()*(hoev-i));
                        } catch (SQLException ex) 
                        {
                        }                            
                    }                        
                }
                else
                {
                    if(hoev >= b.getMinimum())
                    {
                        bonusPtn = Math.round(hoev*0.10);
                        puntenGekr = b.getPuntenGekregen()*hoev;
                        prijs = b.getPrijs()*(hoev);
                        model.addRow(new Object[] {b.getNaam(), hoev, b.getPuntenGekregen()*hoev, "--", bonusPtn, b.getPrijs()*(hoev)});
                        puntenGekr = (double) Math.round(puntenGekr*100)/100;
                        puntenKop = (double) Math.round(puntenKop*100)/100;
                        bonusPtn = (double) Math.round(bonusPtn*100)/100;
                        prijs = (double) Math.round(prijs*100)/100;
                        try 
                        {
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), hoev, puntenGekr+bonusPtn, 0, prijs);
                        } 
                        catch (SQLException ex) 
                        {
                        }                        
                    }
                    else
                    {
                        puntenGekr = b.getPuntenGekregen()*hoev;
                        prijs = b.getPrijs()*(hoev);
                        model.addRow(new Object[] {b.getNaam(), hoev, b.getPuntenGekregen()*hoev, "--", "--", b.getPrijs()*(hoev)});   
                        puntenGekr = (double) Math.round(puntenGekr*100)/100;
                        puntenKop = (double) Math.round(puntenKop*100)/100;
                        bonusPtn = (double) Math.round(bonusPtn*100)/100;
                        prijs = (double) Math.round(prijs*100)/100;
                        try 
                        {
                            sql.addVerkoop(fn.getWinkel(), fn.getIdFiliaal(), sk.getID(), b.getID(), hoev, puntenGekr, 0, prijs);

                        } catch (SQLException ex) 
                        {
                        }                        
                    }
                }
            }
            System.out.println(b.getNaam() + " PG:" + puntenGekr + " PK:" + puntenKop + " BP:" + bonusPtn + " " + prijs);
            puntenTotGekr = puntenTotGekr + puntenGekr;
            puntenTotKopen = puntenTotKopen + puntenKop;
            puntenTotBonus = puntenTotBonus + bonusPtn;
            prijsTot = prijsTot + prijs;
        }
        checkVip(sk);
        sql.updateAccountVerk(sk.getID(), sk.getGesP() + puntenTotGekr + puntenTotBonus, sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus, vip, bs, wasBS, wolverene, wasWolverene, major, wasMajor);
        System.out.println(puntenTotGekr + " " + puntenTotKopen + " " + puntenTotBonus + " " + prijsTot);
    }
    
    public void checkVip(Account a)
    {
        boolean vp = sql.checkVip(a.getID());
        if(sk.getVip() && vp)
        {
            //IS VIP BLIJFT VIP
            checkAwards(a);
            vip = true;
        }
        else if(!sk.getVip() && vp)
        {
            //NIET VIP WORDT VIP
            checkAwards(a);
            vip = true;
        }
        else if(sk.getVip() && !vp)
        {
            //IS VIP WEG VIP
            vip = false;
        }
        else
        {
            
        }
    }
    
    public void checkAwards(Account a)
    {
       checkBigSpender(a);
       checkWolverene(a);
       checkMajor(a);
    }
    
    public void checkBigSpender(Account a)
    {
        MySQL sql = new MySQL();
        boolean bigs = sql.checkBigSpender(a.getID());
        if(a.getBigspender() && bigs)
        {
            //IS BS BLIJFT BS
            bs = a.getBigspender();
            wasBS = a.isWasBigSpender();
        }
        else if(!a.getBigspender() && bigs)
        {
            //NIET BS WORDT BS
            if(a.isWasBigSpender())
            {
                bs = true;
                wasBS = a.isWasBigSpender();
                String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft de BigSpender award gekregen! Aangezien u de BigSpender award al eens heeft gewonnen, werden er geen extra bonuspunten aan uw account toegevoegd.\n\nPuntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                 System.out.println(mails);
                try {
                    //System.out.println(mails);
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                bs = true;
                wasBS = a.isWasBigSpender();
                puntenTotGekr = puntenTotGekr + 500;
                String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft de BigSpender award gekregen! Er werden 500 bonuspunten aan uw account toegevoegd.\n\nNieuw puntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                 System.out.println(mails);
                try {
                    //System.out.println(mails);
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else if(a.getBigspender() && !bigs)
        {
            bs = false;
            wasBS = true;
            try {
                String mails = "Helaas mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft uw BigSpender award verloren.\n\nUw puntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Helaas", mails); 
            } catch (MessagingException ex) {
            }
        }
        else
        {
            bs = a.getBigspender();
            wasBS = a.isWasBigSpender();
            //IS NIET BLIJFT NIET
        }
    }
    
    public void checkWolverene(Account a)
    {
        MySQL sql = new MySQL();
        boolean wv = sql.checkWolverene(a.getID());
        if(a.getWolverene() && wv)
        {
            wolverene = a.getWolverene();
            wasWolverene = a.isWasWolverene();
        }
        else if(!a.getWolverene() && wv)
        {
            //NIET BS WORDT BS
            if(a.isWasWolverene())
            {
                wolverene = true;
                wasWolverene = a.isWasWolverene();                
                String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft de Wolverene award gekregen! Aangezien u de Wolverene award al eens heeft gewonnen, werden er geen extra bonuspunten aan uw account toegevoegd.\n\nPuntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                 System.out.println(mails);
                try {
                    //System.out.println(mails);
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                //NOG NIET
                wolverene = true;
                wasWolverene = a.isWasWolverene();
                puntenTotGekr = puntenTotGekr + 600;
                String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft de Wolverene award gekregen! Er werden 600 bonuspunten aan uw account toegevoegd.\n\nNieuw puntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                 System.out.println(mails);
                try {
                    //System.out.println(mails);
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        else if(a.getWolverene() && !wv)
        {
            try {
                String mails = "Helaas mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU heeft uw Wolverene award verloren.\n\nUw puntensaldo: " 
                    + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Helaas", mails); 
            } catch (MessagingException ex) {
            }

            wolverene = false;
            wasWolverene = true;            
        }
        else
        {
            //IS NIET BLIJFT NIET
            wolverene = a.getWolverene();
            wasWolverene = a.isWasWolverene();
        }
    }
    
    public void checkMajor(Account a)
    {
        MySQL sql = new MySQL();
        boolean maj = sql.checkMajor(fn.getWinkel(), a.getID());
        if(isMajor(a) && maj)
        {
            System.out.println("MAJOR");
            major = a.getMajor();
            wasMajor = a.getWasMajor();
        }
        else if(!isMajor(a) && maj)
        {
            System.out.println("NIEUWMAJOR");
            //ANDERE MAJOR WEG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            addMajor(a);
            if(wasMajor(a))
            {
                try {
                    String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU bent opnieuw major geworden van winkel " + fn.getWinkelNaam() + ". U bent al major van deze winkel geweest dus u krijgt geen extra bonuspunten meer.\n\nPuntensaldo: " 
                        + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus) + "\n\nVeel winkelplezier,\nGroep 22";
                    System.out.println(mails);        
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                try {
                    String mails = "Proficiat mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU bent major geworden van winkel " + fn.getWinkelNaam() + "! Er werden 100 bonuspunten aan uw account toegevoegd.\n\nNieuw puntensaldo: " 
                        + (sk.getWerkP() - puntenTotKopen + puntenTotGekr + puntenTotBonus + 100) + "\n\nVeel winkelplezier,\nGroep 22";
                     System.out.println(mails);
                    //System.out.println(mails);
                    Email.Send("bingo.groep22", "bingotestpass", sk.getEmail(), "", "Goed nieuws!", mails);                
                } catch (MessagingException ex) {
                    //Logger.getLogger(GuiVerkoopVerw.class.getName()).log(Level.SEVERE, null, ex);
                }
                puntenTotGekr = puntenTotGekr + 100;
            }
        }
        else if(isMajor(a) && !maj)
        {
            System.out.println("wtf?");
            major = a.getMajor();
            wasMajor = a.getWasMajor();
        }
        else
        {
            System.out.println("NIETS");
            major = a.getMajor();
            wasMajor = a.getWasMajor();
        }
    }

    public boolean isMajor(Account a)
    {
        String[] temp = a.getMajor().split(",");
        for(int i = 0; i < temp.length ; i++)
        {
            if(!temp[i].isEmpty())
            {
                if(Integer.parseInt(temp[i]) == fn.getWinkel())
                {
                    return true;
                }
            }
        }
        return false;
    }    
    
    public boolean wasMajor(Account a)
    {
        String[] temp = a.getWasMajor().split(",");
        for(int i = 0; i < temp.length ; i++)
        {
            if(!temp[i].isEmpty())
            {
                if(Integer.parseInt(temp[i]) == fn.getWinkel())
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    public void addMajor(Account a)
    {
        int oldmajor = sql.getOMajor(fn.getWinkel());
        Account oMajor = sql.getAccount(oldmajor);
        sql.setOldMajor(oldmajor, delMajor(oMajor), addWasMajor(oMajor));
        try {
            String mails = "Helaas mijnheer/mevrouw " + sk.getSNaam() + "! \n\nU bent uw majorschap van winkel " + fn.getWinkelNaam() + " verloren.\n\nUw puntensaldo: " 
                + oMajor.getWerkP() + "\n\nVeel winkelplezier,\nGroep 22";
            Email.Send("bingo.groep22", "bingotestpass", oMajor.getEmail(), "", "Helaas", mails); 
        } catch (MessagingException ex) {
        }
        sql.newMajor(fn.getWinkel(), a.getID());
        if(a.getMajor().isEmpty())
        {
            major = Integer.toString(fn.getWinkel());
        }
        else
        {
            major = a.getMajor() + "," + Integer.toString(fn.getWinkel());
        }
    }
    
    public String delMajor(Account a)
    {
        String mstring = "";
        String[] temp = a.getMajor().split(",");
        int curindex = 0;
        if(!temp[curindex].isEmpty())
        {
            if(Integer.parseInt(temp[curindex]) != fn.getWinkel())
            {
                mstring += temp[curindex];
                curindex++;
            }
            else
            {
                curindex++;
                if(temp.length > curindex)
                {
                    if(!temp[curindex].isEmpty())
                    {
                        mstring += temp[curindex];
                        curindex++;
                    }
            
                }
        
            }
        }
        for(int i = curindex; i < temp.length ; i++)
        {
            if(!temp[i].isEmpty())
            {
                if(Integer.parseInt(temp[i]) != fn.getWinkel())
                {
                    mstring += "," + temp[i];
                    System.out.println("teststr2 " + i);
                }
            }
        }
        return mstring;
    }
    
    public String addWasMajor(Account a)
    {
        String wmajor = "";
        if(a.getWasMajor().isEmpty())
        {
            wmajor = Integer.toString(fn.getWinkel());
        }
        else
        {
            wmajor = a.getWasMajor() + "," + Integer.toString(fn.getWinkel());
        }
        return wmajor;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBadge1;
    private javax.swing.JLabel lblBadge2;
    private javax.swing.JLabel lblBadge3;
    private javax.swing.JLabel lblDag;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblNaam;
    private javax.swing.JLabel lblPostcode;
    private javax.swing.JLabel lblPunten;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblStraat;
    private javax.swing.JLabel lblVoornaam;
    private javax.swing.JTable tblAankopen;
    // End of variables declaration//GEN-END:variables
}
